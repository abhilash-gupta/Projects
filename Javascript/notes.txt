*******************************************
             JavaScript Tutorial
*******************************************
JavaScript Tutorial 1 - Introduction, NodeJS Installation & Hello World Example
- JavaScript is the world's most popular programming language.
- JavaScript is the programming language of the Web
- Must learn language to become a Web Developer

Uses:
HTML - Creating web pages
CSS - Design web pages
JavaScript - Interact with web pages

What is Node.js?
- Node.js is an open source server environment
- It is free to use
- Node.js runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
- Node.js uses JavaScript on the server

Install Node.js from link:
https://nodejs.org/en/download/prebuilt-installer

- Editor: VS Code (https://code.visualstudio.com/download)

- Example of How JavaScript works with console.log and script tag








JavaScript Tutorial 2 - Change HTML Content using JavaScript
We can use one of the many JavaScript HTML methods - getElementById(), to get the HTML element.
Than we can update the content of this HTML element as per our requirements









JavaScript Tutorial 3 - DOM Selectors to find HTML Elements in JavaScript
We have multiple DOM selectors that can be used based on your choice:
- getElementById()
- getElementsByClassName()
- getElementsByTagName()
- querySelector()
- querySelectorAll()








JavaScript Tutorial 4 - Output in JavaScript
There are multiple ways to provide output in JavaScript:
- innerHTML
- document.write()
- alert()
- console.log()









JavaScript Tutorial 5 - Exercise: Find sum of Numbers Entered by user in JavaScript
Follow below steps to complete this exercise:
1. Ask user to enter two numbers using input fields in HTML
2. Add both these numbers and display the sum in a div tag







JavaScript Tutorial 6 - Variables in Javascript (var vs let vs const)
Variables are Containers for Storing Data

JavaScript Variables can be declared in 4 ways:
- Automatically - [var is used internally]
- Using var - global scope
- Using let [added in 2015] - block scope
- Using const [added in 2015] - block scope

It is a good practice to always declare variables before use.

When to Use var, let, or const?
1. Always declare variables
2. Always use const if the value should not be changed
3. Always use const if the type should not be changed (Arrays and Objects)
4. Only use let if you can't use const
5. Only use var if you MUST support old browsers.












JavaScript Tutorial 7 - Arithmetic Operators in Javascript
Arithmetic Operators are used to perform arithmetic on numbers in Javascript:

+	Addition
-	Subtraction
*	Multiplication
**	Exponentiation (ES2016)
/	Division
%	Modulus (Division Remainder)
++	Increment
--	Decrement










JavaScript Tutorial 8 - Assignment Operators in Javascript
Below are some of the Assignment Operators in Javascript:

Operator	Example		Same As
=		x = y		x = y
+=		x += y		x = x + y
-=		x -= y		x = x - y
*=		x *= y		x = x * y
/=		x /= y		x = x / y
%=		x %= y		x = x % y
**=		x **= y		x = x ** y














JavaScript Tutorial 9 - Comparison Operators in Javascript
Below are some of the Comparison Operators in Javascript:

==	equal to
===	equal value and equal type
!=	not equal
!==	not equal value or not equal type
>	greater than
<	less than
>=	greater than or equal to
<=	less than or equal to
?	ternary operator












JavaScript Tutorial 10 - Exercise on Arithmetic Operators in Javascript
Follow below steps to complete this Javascript practice Exercise:

1. Create 2 variables x and y and assign them values of 10 and 5 respectively
2. Print the result of addition of x and y
3. Print the result of subtraction of x and y
4. Print the result of Multiplication of x and y
5. Print the result of Division of x and y
6. Print the result of Remainder of x and y
7. Print the result of x to the power of y
8. Print the result of x greater than y
9. Find results of above operations when x = 5 and y = 11















JavaScript Tutorial 11 - String in Javascript
String is text that can be assigned or stored in variable

Example:
const str = "Programming for Beginners"

- String concatenation using + operator
- Quotes inside quotes in string
- Template Strings with backticks - `
- String length property
- Escape characters in string (", `, \)
- String comparison
- String letters access















JavaScript Tutorial 12 - Data Types in JavaScript
JavaScript has 8 Datatypes:

1. String
2. Number
3. Bigint
4. Boolean
5. Undefined
6. Null
7. Symbol
8. Object (array, map, set, date, promises, custom objects and many more)

















JavaScript Tutorial 13 - If and else Conditional Statements in JavaScript
Very often when you write code, you want to perform different actions for different decisions.
You can use conditional statements in your code to do this.

In JavaScript we have the following conditional statements:

- Use if to specify a block of code to be executed, if a specified condition is true
- Use else to specify a block of code to be executed, if the same condition is false
- Use else if to specify a new condition to test, if the first condition is false
- Use switch to specify many alternative blocks of code to be executed


















JavaScript Tutorial 14 - Switch Statement in JavaScript
The switch statement is used to perform different actions based on different conditions

Syntax:
switch(expression) {
  case x:
    // code block
    break;
  case y:
    // code block
    break;
  default:
    // code block
}



















JavaScript Tutorial 15 - Exercise to Greet Based on time in Javascript
In this exercise, get the current time using javascript date object and greet the person with good morning or good afternoon message





















JavaScript Tutorial 16 - Ternary Operator in JavaScript (Conditional)
Ternary Operator in JavaScript is used to check for condition similar to if else conditional statement.

Syntax:
Expression ? (execute if expression true) : (execute if expression false)
























JavaScript Tutorial 17 - Functions in JavaScript
A JavaScript function is a block of code designed to perform a particular task.
This JavaScript function is executed when "something" invokes it (calls it).

Syntax:
Function definition:

function name(parameter1, parameter2, parameter3) {
  // code to be executed
}

Function call:
name()

- Example without function parameters
- Example with function parameters
- return statement

Why Functions?
- With functions you can reuse code
- You can write code that can be used many times.
- You can use the same code with different arguments, to produce different results.













JavaScript Tutorial 18 - Arrow Function in JavaScript
These Arrow functions allow us to write shorter function syntax:

Example
let myFunction = (a, b) => a * b;













JavaScript Tutorial 19 - Recursive Function in JavaScript
Recursion is the term used when function calls itself from within it's body.
Recursion can be very useful to complete some mathematical calculations.
Example: Finding Factorial of a number

Syntax:
function name(parameters){
	// some code to be executed
	name(parameters)
}

Note: There should be a breaking point to be defined within function to stop recursion











JavaScript Tutorial 20 - Exercise using Functions in JavaScript
Follow below steps to complete this exercise on functions in JavaScript:

1. Create function with name add taking 2 parameters a and b
2. Calculate addition of a and b and return the result
3. Call this function 5 times with different parameter values
4. Display the results of all calls to function with proper statements to be displayed on console
5. Convert the function to arrow function














JavaScript Tutorial 21 - while loop in JavaScript
while Loop can execute a block of code as long as the specified condition is true.

Syntax:
while (condition) {
  // code block to be executed
}

















JavaScript Tutorial 22 - break and continue statements in JavaScript
The break statement "jumps out" of a loop.
The continue statement "jumps over" one iteration in the loop.

These statements can be used in while and for loops to either go out of the loop or skip an iteration




















JavaScript Tutorial 23 - Arrays in JavaScript
An array is a special variable, which can hold more than one value

Example:
const names = ['John', 'Doe', 'Peter']

- why to use array? - to store similar data in one variable (list)
- Creating array using new keyword
- accessing all array elements
- accessing single array element
- using length property to get the size of array
- looping array elements
- adding array elements using push method



















JavaScript Tutorial 24 - Important Array Methods in JavaScript
We will see some of the important array methods that can be used in javascript:

- length property
- toString()
- at()
- join()
- push()
- pop()
- unshift()
- shift()
- slice()
- splice()






















JavaScript Tutorial 25 - Exercise on Arrays in JavaScript
Follow below steps to complete the exercise:
This exercise is about creating multiplication table using arrays 

1. Create an array of elements having numbers 1 to 10
2. Create a variable with initial value as 5
3. Loop through the array elements to display the multiplication table of the number in variable
4. Change the value of variable and display the table only with even numbers
























JavaScript Tutorial 26 - for loop in JavaScript
For Loop can be used if you want to run the same code over and over again, each time with a different value.

JavaScript supports different kinds of loops:
- for : loops through a block of code a number of times
- for/in : loops through the properties of an object
- for/of : loops through the values of an iterable object

- while : loops through a block of code while a specified condition is true
- do/while : also loops through a block of code while a specified condition is true

Syntax:
for (expression 1; expression 2; expression 3) {
  // code block to be executed
}

























JavaScript Tutorial 27 - Objects in JavaScript
Objects in JavaScript helps us to represent something with multiple properties.

Example:
A person can have a name, age, gender and other properties based on the requirement of project

Syntax:
const objectName = { field1: value1, field2 : value2, field3 : value3 }





















JavaScript Tutorial 28 - Object Methods in JavaScript
Object Methods helps in getting or setting the properties of the objects.
Methods can also be used to perform certain tasks related to objects

























JavaScript Tutorial 29 - Object Constructor in JavaScript
Sometimes we need to create many objects of the same type.
To create an object type we use an object constructor function.
It is considered good practice to name constructor functions with an upper-case first letter

Examples:
person1 = name: John, age: 21, gender: male
person2 = name: Lilly, age: 20, gender: female

Built in JavaScript Constructors
new Object()   // A new Object object
new Array()    // A new Array object
new Map()      // A new Map object
new Set()      // A new Set object
new Date()     // A new Date object
new RegExp()   // A new RegExp object
new Function() // A new Function object






















JavaScript Tutorial 30 - Exercise on Objects in JavaScript
Follow below instructions to complete the exercise on Objects:

1. Create a new Object constructor Person using function keyword taking name and age as parameters
2. Create 2 objects having same name and age as per your choice
3. Create a function inside constructor to display name and age of objects created
4. Compare both the objects using == operator
5. Compare both the objects using === operator


























JavaScript Tutorial 31 - For in Loop in JavaScript
The JavaScript for in statement loops through the properties of an Object

Syntax:
for (key in object) {
  // code block to be executed
}

Note - do not use for in loop for arrays as it might result in inconsistent results without using array index

























JavaScript Tutorial 32 - For of Loop in JavaScript
The JavaScript for of statement loops through the values of an iterable object
It lets you loop over iterable data structures such as Arrays, Strings, Maps, NodeLists, and more

Syntax:
for (variable of iterable) {
  // code block to be executed
}

























JavaScript Tutorial 33 - Array forEach Method in JavaScript (Loop)
The forEach() method calls a function (a callback function) once for each array element

- forEach method takes a callback function, which can have value, index and entire array

Syntax:
array.forEach(callbackFunction)

function callbackFunction(value, index, array){
	
}

Exercise:
Copy elements of one array to another array using forEach























JavaScript Tutorial 34 - Set in JavaScript
A JavaScript Set is a collection of unique values.
Each value can only occur once in a Set.
The values can be of any type, primitive values or objects.

How to Create a Set in JavaScript?
1. Passing an array to new Set()
2. Create an empty set and use add() to add values

- checking typeof for set
- add() method
- has() method
- forEach() method
- values() method
- keys() method
- entries() method





















JavaScript Tutorial 35 - Exercise on Arrays and Set in JavaScript
Follow below steps to complete this exercise:

1. Create an Array with 5 numbers having atleast 1 duplicate number
2. Use forEach loop on array and display elements by adding 10 in all elements
3. Create a set and add all elements to set inside forEach loop
4. Add two more numbers in set using add() method
5. Print the numbers in this set




























JavaScript Tutorial 36 - Map in JavaScript
A Map holds key-value pairs where the keys can be any datatype.
A Map remembers the original insertion order of the keys.

How to create map in javascript?
1. Passing an Array to new Map()
2. Create a Map and use Map.set()

- using set() method to add map elements
- using get() method to get map elements
- typeof map
- size property
- using delete() method to remove key-value pair
- using clear() method to remove all elements
- using has() method to check if key present
- forEach method to invoke a callback
- entries()
- keys()
- values()




















JavaScript Tutorial 37 - Converting String to Number & Number to String in JavaScript
JavaScript variables can be converted to a new variable and another data type:
1. By the use of a JavaScript function
2. Automatically by JavaScript itself

- Number() - Converting Strings to Numbers
- parseInt()
- parseFloat()
- String() - Converting Numbers to Strings
- toString() number method

Automatic Type Conversion
When JavaScript tries to operate on a "wrong" data type, it will try to convert the value to a "right" type.
The result is not always what you expect























JavaScript Tutorial 38 - Destructuring in JavaScript
The destructuring helps to unpack object properties into variables.

Syntax:
let {property1, property2} = objectName

Note: Destructuring can also be used with string, arrays and other iterables

- Swapping values using Destructuring

























JavaScript Tutorial 39 - Regular Expressions in JavaScript
A regular expression is a sequence of characters that forms a search pattern.
The search pattern can be used for text search and text replace operations.

Syntax:
/pattern/modifiers

String methods:
- search()
- replace()

Modifiers:
i - Perform case-insensitive matching	
g - Perform a global match (find all)	
m - Perform multiline matching	
d - Perform start and end matching

- test() method - returns boolean
- exec() method - returns object




















JavaScript Tutorial 40 - try catch Exception Handling in JavaScript (Errors)
When executing JavaScript code, different errors can occur.
Errors can be coding errors made by the programmer, errors due to wrong input, and other unforeseeable things

- try statement defines a code block to run (to try)
- catch statement defines a code block to handle any error
- finally statement defines a code block to run regardless of the result
- throw statement defines a custom error























JavaScript Tutorial 41 - Scope in JavaScript
Scope determines the accessibility or visibility of variables.

JavaScript variables have 3 types of scope:
1. Global scope
2. Function scope
3. Block scope

Before ES6 (2015), JavaScript variables had only Global Scope and Function Scope.
ES6 introduced two important new JavaScript keywords: let and const - to help with block scope






















JavaScript Tutorial 42 - Hoisting in JavaScript
Hoisting is JavaScript's default behavior of moving declarations to the top.
JavaScript only hoists declarations, not initializations

Note: Best practice is to declare all variables at top before using them

























JavaScript Tutorial 43 - this keyword in JavaScript
In JavaScript, this keyword refers to an object, based on the context.
this keyword refers to different objects depending on how it is used

- In an object method, this refers to the object.
- Alone, this refers to the global object.
- In a function, this refers to the global object.
- In a function, in strict mode, this is undefined.
- In an event, this refers to the element that received the event.
- Methods like call(), apply(), and bind() can refer this to any object.





















JavaScript Tutorial 44 - Class in JavaScript
JavaScript Classes are templates for JavaScript Objects
ECMAScript 2015, also known as ES6, introduced JavaScript Classes

class ClassName {
  constructor() { ... }
}

- Use the keyword class to create a class
- Always add a method named constructor()

Note:
The constructor method is a special method:
- It has to have the exact name "constructor"
- It is executed automatically when a new object is created
- It is used to initialize object properties



















JavaScript Tutorial 45 - What is JSON Format in JavaScript
JSON is a format for storing and transporting data.
JSON is often used when data is sent from a server to a web page

What is JSON?
- JSON stands for JavaScript Object Notation
- JSON is a lightweight data interchange format
- JSON is language independent
- JSON is "self-describing" and easy to understand

Example:
{
"employees":[
  {"firstName":"John", "lastName":"Doe"},
  {"firstName":"Anna", "lastName":"Smith"},
  {"firstName":"Peter", "lastName":"Jones"}
]
}

- JSON Data - A Name and a Value
- JSON Objects
- JSON Arrays

- Converting a JSON Text to a JavaScript Object




















